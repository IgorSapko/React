{"version":3,"sources":["webpack:///./components/Feedback/Feedback.js","webpack:///./components/Statistics/Statistics.js","webpack:///./components/Section/Section.js","webpack:///./App.js","webpack:///./index.js"],"names":["ButtonsListStyles","FeedbackStyles","ul","Feedback","onLeaveFeedback","options","className","map","elem","key","type","onClick","toUpperCase","slice","propTypes","PropTypes","func","isRequired","List","StatisticsStyles","NoFeedbackSpan","span","Statistics","good","neutral","bad","positivePercentage","total","number","Section","title","children","string","App","e","nameOfButton","nativeEvent","target","childNodes","nodeValue","setState","state","Math","round","render","this","Object","keys","handleIncrement","countTotalFeedback","countPositiveFeedbackPercentage","Component","ReacDom","document","getElementById"],"mappings":"2ZAIA,IAAMA,EAAoBC,IAAeC,GAAlB,KAKvB,SAASC,EAAT,GAAgD,IAA5BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QACnC,OACE,kBAACL,EAAD,CAAmBM,UAAU,eAC1BD,EAAQE,KAAI,SAAAC,GACX,OACE,4BAAQC,IAAKD,EAAME,KAAK,SAASC,QAASP,GACvCI,EAAK,GAAGI,cAAgBJ,EAAKK,MAAM,QAQhDV,EAASW,UAAY,CACnBV,gBAAiBW,IAAUC,KAAKC,YAGnBd,I,EAAAA,I,4SCvBf,IAAMe,EAAOC,IAAiBjB,GAApB,KAMJkB,EAAiBD,IAAiBE,KAApB,KAKpB,SAASC,EAAT,GAAuE,IAAjDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,mBAAoBC,EAAS,EAATA,MAC5D,OAAOJ,GAAQC,GAAWC,EACxB,6BACE,kBAACP,EAAD,KACE,4BACE,uCACA,8BAAOK,IAET,4BACE,0CACA,8BAAOC,IAET,4BACE,sCACA,8BAAOC,IAET,4BACE,wCACA,8BAAOE,IAET,4BACE,oDACA,8BAAOD,EAAP,QAKN,kBAACN,EAAD,6BAIJE,EAAWR,YAAX,GACES,KAAMR,IAAUa,SADlB,KAEQb,IAAUa,OAFlB,EAGEJ,QAAST,IAAUa,OAHrB,GAMeN,QCjDA,SAASO,EAAT,GAAsC,IAAnBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,4BAAKD,GACJC,G,mPAKPF,EAAQf,UAAY,CAClBgB,MAAOf,IAAUiB,OAAOf,Y,ICPLgB,E,wKACX,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,I,0BAEW,SAAAS,GAChB,IAAMC,EAAeD,EAAEE,YAAYC,OAAOC,WAAW,GAAGC,UAEnC,SAAjBJ,EACF,EAAKK,UAAS,WACZ,MAAO,CAAEjB,KAAM,EAAKkB,MAAMlB,KAAO,MAET,YAAjBY,EACT,EAAKK,UAAS,WACZ,MAAO,CAAEhB,QAAS,EAAKiB,MAAMjB,QAAU,MAEf,QAAjBW,GACT,EAAKK,UAAS,WACZ,MAAO,CAAEf,IAAK,EAAKgB,MAAMhB,IAAM,S,6BAKjB,WAAI,MACE,EAAKgB,MAA1BlB,EADmB,EACnBA,KAEP,OAH0B,EACdC,QACYD,EAFE,EACLE,O,0CAIc,WAAI,MACJ,EAAKgB,MAA5BlB,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,QAASC,EADY,EACZA,IAGvB,OAF0BiB,KAAKC,MAAOpB,GAAQC,EAAUD,EAAOE,GAAQ,Q,4GAKzEmB,OAAA,WAAS,MACqBC,KAAKJ,MAA1BlB,EADA,EACAA,KAAKC,EADL,EACKA,QAASC,EADd,EACcA,IAErB,OACE,6BACE,kBAACI,EAAD,CAASC,MAAM,yBACb,kBAAC,EAAD,CAAUzB,QAASyC,OAAOC,KAAKF,KAAKJ,OAAQrC,gBAAiByC,KAAKG,mBAEpE,kBAACnB,EAAD,CAASC,MAAM,cACb,kBAAC,EAAD,CAAYP,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKE,MAAOkB,KAAKI,qBAAsBvB,mBAAoBmB,KAAKK,uC,GA7CxFC,aCDjCC,IAAQR,OAAO,kBAAC,EAAD,MAAQS,SAASC,eAAe,W","file":"main.954f3f6a75fd5a4d5215.js","sourcesContent":["import React, { Children } from 'react';\r\nimport PropTypes, { number } from 'prop-types';\r\nimport FeedbackStyles from 'styled-components';\r\n\r\nconst ButtonsListStyles = FeedbackStyles.ul`\r\n&>button{margin-right: 15px;};\r\n&>button:hover{background:blue; \r\ncursor:pointer}\r\n`;\r\nfunction Feedback({ onLeaveFeedback, options }) {\r\n  return (\r\n    <ButtonsListStyles className=\"buttonsList\">\r\n      {options.map(elem => {\r\n        return (\r\n          <button key={elem} type=\"button\" onClick={onLeaveFeedback}>\r\n            {elem[0].toUpperCase() + elem.slice(1)}\r\n          </button>\r\n        );\r\n      })}\r\n    </ButtonsListStyles>\r\n  );\r\n}\r\n\r\nFeedback.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Feedback;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport StatisticsStyles from 'styled-components';\r\n\r\nconst List = StatisticsStyles.ul`\r\nlist-style: none;\r\n&>li{margin-bottom: 6px;}\r\n&>li>span:first-child{margin-right: 6px;}\r\n\r\n`;\r\nconst NoFeedbackSpan = StatisticsStyles.span`\r\nfont-size:18px;\r\nfont-weight:700px\r\n`;\r\n\r\nfunction Statistics({ good, neutral, bad, positivePercentage, total }) {\r\n  return good || neutral || bad ? (\r\n    <div>\r\n      <List>\r\n        <li>\r\n          <span>Good:</span>\r\n          <span>{good}</span>\r\n        </li>\r\n        <li>\r\n          <span>Neutral:</span>\r\n          <span>{neutral}</span>\r\n        </li>\r\n        <li>\r\n          <span>Bad:</span>\r\n          <span>{bad}</span>\r\n        </li>\r\n        <li>\r\n          <span>Total:</span>\r\n          <span>{total}</span>\r\n        </li>\r\n        <li>\r\n          <span>Positive feedback:</span>\r\n          <span>{positivePercentage}%</span>\r\n        </li>\r\n      </List>\r\n    </div>\r\n  ) : (\r\n    <NoFeedbackSpan>'No feedbacks given'</NoFeedbackSpan>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport Feedback from './components/Feedback/Feedback.js';\r\nimport Statistics from './components/Statistics/Statistics.js';\r\nimport Section from './components/Section/Section';\r\nimport { object } from 'prop-types';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  handleIncrement = e => {\r\n    const nameOfButton = e.nativeEvent.target.childNodes[0].nodeValue;\r\n    \r\n    if (nameOfButton === \"Good\") {\r\n      this.setState(() => {\r\n        return { good: this.state.good + 1 };\r\n      });\r\n    } else if (nameOfButton === 'Neutral') {\r\n      this.setState(() => {\r\n        return { neutral: this.state.neutral + 1 };\r\n      });\r\n    } else if (nameOfButton === 'Bad') {\r\n      this.setState(() => {\r\n        return { bad: this.state.bad + 1 };\r\n      });\r\n    }\r\n  };\r\n\r\n  countTotalFeedback =()=>{\r\nconst {good,neutral, bad} = this.state;\r\nconst total = neutral + good + bad;\r\nreturn total\r\n  };\r\n   countPositiveFeedbackPercentage=()=>{\r\n    const { good, neutral, bad } = this.state;\r\n    const positivePercentage= Math.round((good / (neutral + good + bad)) * 100); \r\n   \r\n    return positivePercentage;\r\n    \r\n   };\r\n  render() {\r\n    const {good,neutral, bad} = this.state;\r\n   \r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <Feedback options={Object.keys(this.state)} onLeaveFeedback={this.handleIncrement}></Feedback>\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          <Statistics good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()}/>\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReacDom from 'react-dom';\r\nimport App from './App'\r\n\r\n\r\nReacDom.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}